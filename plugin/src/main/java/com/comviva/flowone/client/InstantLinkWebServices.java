package main.java.com.comviva.flowone.client;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * Service to send requests to InstantLink
 *
 * This class was generated by Apache CXF 3.3.4
 * 2020-05-07T09:57:43.630-03:00
 * Generated source version: 3.3.4
 *
 */
@WebServiceClient(name = "InstantLinkWebServices",
                  wsdlLocation = "file:/C:/Users/tbel/Documents/workspace_new/ASA_FlowOne_Client/WebContent/InstantLinkWebServices.wsdl",
                  targetNamespace = "http://soa.comptel.com/2011/02/instantlink")
public class InstantLinkWebServices extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://soa.comptel.com/2011/02/instantlink", "InstantLinkWebServices");
    public final static QName InstantLinkWebServicesPort = new QName("http://soa.comptel.com/2011/02/instantlink", "InstantLinkWebServicesPort");
    static {
        URL url = null;
        try {
            url = new URL("file:/C:/Users/tbel/Documents/workspace_new/ASA_FlowOne_Client/WebContent/InstantLinkWebServices.wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(InstantLinkWebServices.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "file:/C:/Users/tbel/Documents/workspace_new/ASA_FlowOne_Client/WebContent/InstantLinkWebServices.wsdl");
        }
        WSDL_LOCATION = url;
    }

    public InstantLinkWebServices(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public InstantLinkWebServices(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public InstantLinkWebServices() {
        super(WSDL_LOCATION, SERVICE);
    }

    public InstantLinkWebServices(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public InstantLinkWebServices(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public InstantLinkWebServices(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     * A SOAP 1.2 port
     *
     * @return
     *     returns InstantLinkSOA
     */
    @WebEndpoint(name = "InstantLinkWebServicesPort")
    public InstantLinkSOA getInstantLinkWebServicesPort() {
        return super.getPort(InstantLinkWebServicesPort, InstantLinkSOA.class);
    }

    /**
     * A SOAP 1.2 port
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns InstantLinkSOA
     */
    @WebEndpoint(name = "InstantLinkWebServicesPort")
    public InstantLinkSOA getInstantLinkWebServicesPort(WebServiceFeature... features) {
        return super.getPort(InstantLinkWebServicesPort, InstantLinkSOA.class, features);
    }

}
